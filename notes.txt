2021-06-25

#To install the RPyC Python package into the Python environment used by fusion:
"C:\Users\Admin\AppData\Local\Autodesk\webdeploy\production\48ac19808c8c18863dd6034eee218407ecc49825\Python\python.exe" -m pip install rpyc
"C:\Users\Admin\AppData\Local\Autodesk\webdeploy\production\48ac19808c8c18863dd6034eee218407ecc49825\Python\python.exe" -m pip install Pillow
"C:\Users\Admin\AppData\Local\Autodesk\webdeploy\production\48ac19808c8c18863dd6034eee218407ecc49825\Python\python.exe" -m pip install requests

"C:\Users\Admin\AppData\Local\Autodesk\webdeploy\production\48ac19808c8c18863dd6034eee218407ecc49825\Python\python.exe"  "C:\Users\Admin\AppData\Local\Autodesk\webdeploy\production\48ac19808c8c18863dd6034eee218407ecc49825\Python\Scripts\rpyc_classic.py"

Fusion360 --enable 87ab9c26-96bf-46c3-89dc-73a61f81390d

C:\Users\Admin\AppData\Local\Autodesk\webdeploy\production\48ac19808c8c18863dd6034eee218407ecc49825>fusion360 --help

C:\Users\Admin\AppData\Local\Autodesk\webdeploy\production\48ac19808c8c18863dd6034eee218407ecc49825>"C:/Users/Admin/AppData/Local/Autodesk/webdeploy/production/48ac19808c8c18863dd6034eee218407ecc49825/plugins"
Following are the existing command line options in the system (case in-sensitive):
--help, -?                       Display the help information.
--showInternal                   Display internal command line actions to the user.
--nologo                         Disable splash screen
--exit                           Shutdown the application before loading Addins
--exitAfterAddIn                 Shutdown the application after loading Addins
--safeMode                       Run in safe mode that disables automatic script loading and certain optimization
--activateTestingContext         Activate testing context
--standaloneNTestStartFusion     The flag represent fusion is started up by standalone NTest
--AutoCAD                        Show return to AutoCAD button
--Inventor                       Show return to Inventor button
--TestingDashboard               Set testing flag to disable dialogs to support automation of dashboard JS tests
--ClearUserCache                 Try to delete Fusion user's cloud cache folders when we are online.
--offlineStart                   Start from offline
--execute, -e                    <TextCommand> Execute the given text command after loading addins
--enable                         <Addin1_AppName Addin2_AppName...> Enable the given addins (in double-quotes)
--disable                        <Addin1_AppName Addin2_AppName...> Disable the given addins (in double-quotes)
--print                          Not implemented yet
--log                            <Log file> Save command-line output into a log file
--Diagnostic, -d                 Dump out user's diagnostics data to a zip file via command-line
--autologin                      username,password
--autoregister                   firstname,lastname,email,password
--fullTest                       [Result file] Run full regression test after UI loaded
--perfTest                       <Baseline> [TestCase|TranscriptFileOrDir] [/log <Result file>] Run performance tests after UI loaded, and exit the application after running the tests. Either relative path to "Performance" folder or a full path is acceptable in Baseline and TranscriptFileOrDir


Fusion360 --enable 87ab9c26-96bf-46c3-89dc-73a61f81390d
Fusion360 --enable "87ab9c26-96bf-46c3-89dc-73a61f81390d"
Fusion360 --enable 87ab9c2696bf46c389dc73a61f81390d
Fusion360 --enable "87ab9c2696bf46c389dc73a61f81390d"
Fusion360 --enable x
Fusion360 --enable "x"
Fusion360 --enable "parts4cad"
Fusion360 --enable "EA4AE962-C943-4DB7-BF33-B9575C0B6D57"
Fusion360 --enable EA4AE962-C943-4DB7-BF33-B9575C0B6D57
Fusion360 --enable "EA4AE962C9434DB7BF33B9575C0B6D57"
Fusion360 --enable EA4AE962C9434DB7BF33B9575C0B6D57
Fusion360 --enable team-switcher


taskkill /t /f /im Fusion360.exe

Fusion360 --exitAfterAddIn 
Fusion360 --execute "ScriptsManagerCommand"

Fusion360 --execute "APIDebug.addIns"
Command APIDebug.addIns is not executed for it is not external command. Use '/?' to get help on available commands
Execute command text failed for APIDebug.addIns

kitty.exe -localproxy "C:\cygwin64\bin\cygtermd.exe /cygdrive/c/Windows /cygdrive/c/Windows/System32/cmd.exe" localhost -classname e128e8f02fc6488687ef67661803947e 

Python.Run "C:\\work\\fusion_programmatic_experiment\\loader.py"
Python.Run "C:\\work\\fusion_programmatic_experiment\\loader.py"
Python.Run 'C:/work/fusion_programmatic_experiment/loader.py'
Python.Run "C:/work/fusion_programmatic_experiment/loader.py"
Python.Run --showInternal "C:/work/fusion_programmatic_experiment/loader.py"
taskkill /t /f /im Fusion360.exe

Fusion360 --execute Python.Run "C:/work/fusion_programmatic_experiment/loader.py"
#>>> Command Python.Run is not executed for it is not external command. 
taskkill /t /f /im Fusion360.exe && Fusion360 --execute "NuCommands.RunScriptCmd ""C:/work/fusion_programmatic_experiment/loader.py"""
taskkill /t /f /im Fusion360.exe && Fusion360 --showInternal --execute "?"
taskkill /t /f /im Fusion360.exe && Fusion360 --showInternal --execute "Application.StartupTime"
taskkill /t /f /im Fusion360.exe && Fusion360 --showInternal --execute "Fusion.SampleAssy"
taskkill /t /f /im Fusion360.exe && Fusion360 --showInternal --execute "Python.Enable"
taskkill /t /f /im Fusion360.exe && Fusion360 --showInternal --execute "Paths.Get"

# The last resort might be to manipulate the ini file that tells Fusion which add-ins/scripts to run on startup, and add the path of our loader script to that ini file to get fusion to run it on startup.

C:\Users\Admin\AppData\Roaming\Autodesk\Autodesk Fusion 360\T2TVKUYMZWD8\JSLoadedScriptsinfo
# the above file is a JSON file containing a single object, which has a "loadedScripts" property
# whose value is a list of objects that look like 
{
    "name": "loader",
    "path": "C:/work/fusion_programmatic_experiment/loader.py",
    "isRemoved": false,
    "runOnStartup": true
}


In order to get Fusion to load an arbitrary script on startup, we insert an entry into this list.

#the PAths.Get text command produces a long list of name vlaue pairs, onn eof which has name autorunScriptsDirectory and value C:/Users/Admin/AppData/Roaming/Autodesk/Autodesk Fusion 360/MyScripts/Autorun/

Options.ShowAllOptions

taskkill /t /f /im Fusion360.exe && Fusion360
taskkill /t /f /im Fusion360.exe & Fusion360 --showInternal

DebugCommands.ListCommandDefinitions /Summary
TextCommands.List  > C:\work\fusion_programmatic_experiment\dd.txt
TextCommands.List /Hidden > C:\work\fusion_programmatic_experiment\d.txt

DebugCommands.ListCommandDefinitions /Summary > C:\work\fusion_programmatic_experiment\c.txt

HKEY_CLASSES_ROOT\PROTOCOLS\Handler

Python.ListFunctions > C:\work\fusion_programmatic_experiment\python_listfunctions.txt

#When I click the debug buitton in the fusion UI, fusion runs the following command:
C:/Users/Admin/AppData/Local/Autodesk/webdeploy/production/48ac19808c8c18863dd6034eee218407ecc49825/Python\python C:\Users\Admin\.vscode\extensions\ms-python.python-2021.6.944021595\pythonFiles\lib\python\debugpy\adapter --for-server 65502 --host 127.0.0.1 --port 9000 --server-access-token ca152943de97b9841b405f0e2fcecfcc389776a9128cda2f85d8719424e0e62f
C:/Users/Admin/AppData/Local/Autodesk/webdeploy/production/48ac19808c8c18863dd6034eee218407ecc49825/Python\python C:\Users\Admin\.vscode\extensions\ms-python.python-2021.6.944021595\pythonFiles\lib\python\debugpy\adapter --for-server 61428 --host 127.0.0.1 --port 9000 --server-access-token defad5a6c0b2e768b4c7ddb0c840f93ec855f0d1a3dda9649f42ef7892d2f139

# we run fusion, and, just after startup has completed, observe that fusion is listening on the following ports:
9766
55459
55457
55458

#then, we run the add-in in debugging mode
# as is typical, Fusion runs the following command:
C:/Users/Admin/AppData/Local/Autodesk/webdeploy/production/48ac19808c8c18863dd6034eee218407ecc49825/Python\python C:\Users\Admin\.vscode\extensions\ms-python.python-2021.6.944021595\pythonFiles\lib\python\debugpy\adapter --for-server 49158 --host 127.0.0.1 --port 9000 --server-access-token 73e25b26a65b8cb09f3200329056c04a3adaa7972e66fc6a544a840fd7e89e2f
#> no change in the set of ports on which fusion is listening.
#> fusion now has the following connections to other ports on localhost open:
63670 <-> 55457 (this is fusion itself)
63759 <-> 55458 (this is fusion itself)
55457 <-> 63760 (apparently, this is fusion itself)
49161 <-> 49159 (this is python (pid 31268), which is the process launched by fusion itself)


Options.ShowAllCommands /on

grep  --with-filename --recursive "debugpy" C:/Users/Admin/AppData/Local/Autodesk/webdeploy/production/48ac19808c8c18863dd6034eee218407ecc49825/*


What is the relationship between debugpy and pydevd?


# here are some events that aoccur, as captured by procmon,
# when I run an add-in in debug mode from the fusion ui:
C:\WINDOWS\system32\cmd.exe /c ""C:/Program Files/Microsoft VS Code/bin/Code.cmd" --install-extension ms-python.python"
"C:\Program Files\Microsoft VS Code\bin\..\Code.exe"  "C:\Program Files\Microsoft VS Code\bin\..\resources\app\out\cli.js" --install-extension ms-python.python
C:/Users/Admin/AppData/Local/Autodesk/webdeploy/production/48ac19808c8c18863dd6034eee218407ecc49825/Python\python C:\Users\Admin\.vscode\extensions\ms-python.python-2021.6.944021595\pythonFiles\lib\python\debugpy\adapter --for-server 55003 --host 127.0.0.1 --port 9000 --server-access-token 8facce56d073fefdddea0f1da6f6bbf2db76088ca3e86ca57caf5b1140c25eed
C:\WINDOWS\system32\cmd.exe /c ""C:\Program Files\Microsoft VS Code\bin\Code.cmd" --new-window "C:/work/fusion_programmatic_experiment/fusion_script_runner_addin" "C:/work/fusion_programmatic_experiment/fusion_script_runner_addin/fusion_script_runner_addin.py" "
"C:\Program Files\Microsoft VS Code\bin\..\Code.exe"  "C:\Program Files\Microsoft VS Code\bin\..\resources\app\out\cli.js" --new-window "C:/work/fusion_programmatic_experiment/fusion_script_runner_addin" "C:/work/fusion_programmatic_experiment/fusion_script_runner_addin/fusion_script_runner_addin.py"
"C:\Program Files\Microsoft VS Code\Code.exe" --type=crashpad-handler --user-data-dir=C:\Users\Admin\AppData\Roaming\Code /prefetch:7 --no-rate-limit --monitor-self-annotation=ptype=crashpad-handler --database=C:\Users\Admin\AppData\Roaming\Code\Crashpad --annotation=_companyName=Microsoft --annotation=_productName=VSCode --annotation=_version=1.57.1 --annotation=prod=Electron --annotation=ver=12.0.7 --initial-client-data=0x41c,0x420,0x424,0x3fc,0x428,0x7ff71c946e90,0x7ff71c946ea0,0x7ff71c946eb0
"C:\Program Files\Microsoft VS Code\Code.exe" --type=gpu-process --field-trial-handle=1020,3883915837226408076,7057698399515787147,131072 --enable-features=WebComponentsV0Enabled --disable-features=CalculateNativeWinOcclusion,CertVerifierService,CookiesWithoutSameSiteMustBeSecure,SameSiteByDefaultCookies,SpareRendererForSitePerProcess --disable-color-correct-rendering --gpu-preferences=SAAAAAAAAADgAAAwAAAAAAAAAAAAAAAAAABgAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAAAAAAAAHgAAAAAAAAAKAAAAAQAAAAgAAAAAAAAACgAAAAAAAAAMAAAAAAAAAA4AAAAAAAAABAAAAAAAAAAAAAAAAUAAAAQAAAAAAAAAAAAAAAGAAAAEAAAAAAAAAABAAAABQAAABAAAAAAAAAAAQAAAAYAAAAIAAAAAAAAAAgAAAAAAAAA --mojo-platform-channel-handle=1532 /prefetch:2
"C:\Program Files\Microsoft VS Code\Code.exe" --type=renderer --disable-color-correct-rendering --field-trial-handle=1520,7193355912208721995,2364554299917487944,131072 --enable-features=WebComponentsV0Enabled --disable-features=CalculateNativeWinOcclusion,CertVerifierService,CookiesWithoutSameSiteMustBeSecure,SameSiteByDefaultCookies,SpareRendererForSitePerProcess --lang=en-US --standard-schemes=vscode-webview,vscode-file --secure-schemes=vscode-webview,vscode-file --bypasscsp-schemes --cors-schemes=vscode-webview,vscode-file --fetch-schemes=vscode-webview,vscode-file --service-worker-schemes=vscode-webview --streaming-schemes --app-user-model-id=Microsoft.VisualStudioCode --app-path="C:\Program Files\Microsoft VS Code\resources\app" --no-sandbox --no-zygote --device-scale-factor=1.5 --num-raster-threads=4 --enable-main-frame-before-activation --renderer-client-id=20 --no-v8-untrusted-code-mitigations --mojo-platform-channel-handle=10156 /prefetch:1 --vscode-window-config=vscode:1b768dd1-e3e5-4536-8884-d337194f9a28
"C:\Program Files\Microsoft VS Code\Code.exe" --type=utility --utility-sub-type=network.mojom.NetworkService --field-trial-handle=1020,3883915837226408076,7057698399515787147,131072 --enable-features=WebComponentsV0Enabled --disable-features=CalculateNativeWinOcclusion,CertVerifierService,CookiesWithoutSameSiteMustBeSecure,SameSiteByDefaultCookies,SpareRendererForSitePerProcess --lang=en-US --service-sandbox-type=network --standard-schemes=vscode-webview,vscode-file --secure-schemes=vscode-webview,vscode-file --bypasscsp-schemes --cors-schemes=vscode-webview,vscode-file --fetch-schemes=vscode-webview,vscode-file --service-worker-schemes=vscode-webview --streaming-schemes --mojo-platform-channel-handle=1548 /prefetch:8
"C:\Program Files\Microsoft VS Code\Code.exe" --inspect-port=0 "c:\Program Files\Microsoft VS Code\resources\app\out\bootstrap-fork" --type=extensionHost
"c:\Program Files\Microsoft VS Code\resources\app\out\vs\platform\files\node\watcher\win32\CodeHelper.exe" c:\work\fusion_programmatic_experiment\fusion_script_runner_addin
C:\WINDOWS\system32\cmd.exe /d /s /c "wsl.exe -l -q"
\\?\C:\WINDOWS\system32\conhost.exe --headless --width 88 --height 31 --signal 0x728 --server 0x654
C:\WINDOWS\System32\cmd.exe


C:/Users/Admin/AppData/Local/Autodesk/webdeploy/production/48ac19808c8c18863dd6034eee218407ecc49825/Python\python C:\Users\Admin\.vscode\extensions\ms-python.python-2021.6.944021595\pythonFiles\lib\python\debugpy\adapter --for-server 49158 --host 127.0.0.1 --port 9000 --server-access-token 73e25b26a65b8cb09f3200329056c04a3adaa7972e66fc6a544a840fd7e89e2f

tail -F "C:\work\fusion_programmatic_experiment\fusion_script_runner_addin\fusion_script_runner_addin_log.log"
tail -F "%TEMP%/fusion_script_runner_addin_log.log"


grep  --with-filename --recursive "pathMappings" "C:/Users/Admin/.vscode/extensions/ms-python.python-2021.6.944021595/pythonFiles/lib/python/debugpy/_vendored/pydevd"/*
grep  --with-filename --recursive "attach" "C:/Users/Admin/.vscode/extensions/ms-python.python-2021.6.944021595/pythonFiles/lib/python/debugpy/_vendored/pydevd"/*
grep  --with-filename --recursive "filePath" "C:/Users/Admin/.vscode/extensions/ms-python.python-2021.6.944021595/pythonFiles/lib/python/debugpy/_vendored/pydevd"/*
grep  --with-filename --recursive "_get_handler_for" "C:/Users/Admin/.vscode/extensions/ms-python.python-2021.6.944021595/pythonFiles/lib/python/debugpy"/*
grep  --with-filename --recursive "JsonMessageChannel" "C:/Users/Admin/.vscode/extensions/ms-python.python-2021.6.944021595/pythonFiles/lib/python/debugpy"/*
grep  --with-filename --recursive "on_attach_request" "C:/Users/Admin/.vscode/extensions/ms-python.python-2021.6.944021595/pythonFiles/lib/python/debugpy"/*
grep  --with-filename --recursive "ON_attach_request" "C:/Users/Admin/.vscode/extensions/ms-python.python-2021.6.944021595/pythonFiles/lib/python/debugpy"/*
grep  --with-filename --recursive --ignore-case "ON_attach_request" "C:/Users/Admin/.vscode/extensions/ms-python.python-2021.6.944021595/pythonFiles/lib/python/debugpy"/*
grep  --with-filename --recursive --ignore-case "filePath" "C:/Users/Admin/.vscode/extensions/ms-python.python-2021.6.944021595/pythonFiles/lib/python/debugpy"/*
grep  --with-filename --recursive --ignore-case "workspaceFolder" "C:/Users/Admin/.vscode/extensions/ms-python.python-2021.6.944021595/pythonFiles/lib/python/debugpy"/*
grep  --with-filename --recursive --ignore-case "workspace" "C:/Users/Admin/.vscode/extensions/ms-python.python-2021.6.944021595/pythonFiles/lib/python/debugpy"/*
grep  --with-filename --recursive --exclude '__pycache__' --ignore-case "PYDEVD_DEBUG_FILE" "C:/Users/Admin/.vscode/extensions/ms-python.python-2021.6.944021595/pythonFiles/lib/python/debugpy"/*
grep  --with-filename --line-number --recursive --exclude-dir '__pycache__' --ignore-case "PYDEVD_DEBUG_FILE" "C:/Users/Admin/.vscode/extensions/ms-python.python-2021.6.944021595/pythonFiles/lib/python/debugpy"/*
grep  --with-filename --line-number --recursive --exclude-dir '__pycache__' --ignore-case "force_pydevd" "C:/Users/Admin/.vscode/extensions/ms-python.python-2021.6.944021595/pythonFiles/lib/python/debugpy"/*
grep  --with-filename --line-number --recursive --exclude-dir '__pycache__' --ignore-case "force_pydevd" "C:/Users/Admin/.vscode/extensions/ms-python.python-2021.6.944021595/pythonFiles/lib/python/debugpy"/*

grep  --with-filename --recursive --ignore-case "This file is for the server to provide logic that" "C:/Users/Admin/AppData/Local/Autodesk/webdeploy/production/48ac19808c8c18863dd6034eee218407ecc49825"/*
grep  --with-filename --recursive --ignore-case "isblockedVersion" "C:/Users/Admin/AppData/Local/Autodesk/webdeploy/production/48ac19808c8c18863dd6034eee218407ecc49825"/*
grep  --with-filename --line-number --recursive --exclude-dir '__pycache__' --ignore-case "toast" "C:/Users/Admin/AppData/Local/Autodesk/webdeploy/production/48ac19808c8c18863dd6034eee218407ecc49825"/*
grep  --with-filename --line-number --recursive --only-matching  --exclude-dir '__pycache__' --ignore-case "toast" "C:/Users/Admin/AppData/Local/Autodesk/webdeploy/production/48ac19808c8c18863dd6034eee218407ecc49825"/*


#to-do: try setting the DEBUGPY_LOG_DIR environment variable, which should cause the debugpy adapter to dump logs to the specified directory.  These logs might offer some cluses as to how Fusion studio is 
# configuring debugpy/pydevd to effectively hook into the ide attach events.
DEBUGPY_LOG_DIR=C:\work\fusion_programmatic_experiment\debugpy_log


import pprint, inspect; pprint.pprint(inspect.getmembers(globals())) 
import pprint, inspect; pprint.pprint(list(globals().keys()))  
pp=pprint.PrettyPrinter(indent=4, width=-1, depth=2);

pp.pprint(inspect.getmembers(pydevd_file_utils)) 
pp.pprint(sorted(list(globals().keys())))
pp.pprint(sorted(dir()))
pp.pprint(inspect.getmembers(pydevd_file_utils)) 

pp=pprint.PrettyPrinter(indent=4, width=-1, depth=1); pp.pprint(inspect.getmembers(pydevd_file_utils)) 
pp=pprint.PrettyPrinter(indent=4, width=80, depth=2, compact=False); pp.pprint(
    [
        (name, type(value))
        for (name, value) in inspect.getmembers(pydevd_file_utils)
    ]
) 

pp=pprint.PrettyPrinter(indent=4, width=80, depth=2, compact=False); pp.pprint(
    [
        (name, type(value))
        for (name, value) in globals().items()
    ]
) 

pp.pprint(
    [
        (name, type(value))
        for (name, value) in inspect.getmembers(debugpy)
    ]
) 

pp=pprint.PrettyPrinter(indent=4, width=80, depth=2, compact=False); pp.pprint(
    [
        (name, type(value))
        for (name, value) in debugpy.__builtins__['globals']().items()
    ]
) 

pp.pprint(sys.modules)
pp.pprint(sys.modules)

pp.pprint(
    [
        (name, type(value))
        for (name, value) in inspect.getmembers(sys.modules['neu_internal'])
    ]
) 

pp.pprint(
    [
        (name, type(value))
        for (name, value) in inspect.getmembers(sys.modules['pydevd'])
    ]
) 

sys.modules['pydevd'].get_global_debugger()

pp.pprint(
    [
        (name, type(value), value)
        for (name, value) in inspect.getmembers(sys.modules['pydevd'].get_global_debugger())
    ]
) 


set DEBUGPY_LOG_DIR=C:/work/fusion_programmatic_experiment/debugpy_log && "C:/Users/Admin/AppData/Local/Autodesk/webdeploy/production/48ac19808c8c18863dd6034eee218407ecc49825/Python/python.exe" C:\Users\Admin\.vscode\extensions\ms-python.python-2021.6.944021595\pythonFiles\lib\python\debugpy\adapter --for-server 63980 --host 127.0.0.1 --port 9000 --server-access-token 14f7030f88c84ca7ba96a4e6d7ddea1cf5ce006b17560ba7e9a38336b1e292c7
set "DEBUGPY_LOG_DIR=C:/work/fusion_programmatic_experiment/debugpy_log" && "C:/Users/Admin/AppData/Local/Autodesk/webdeploy/production/48ac19808c8c18863dd6034eee218407ecc49825/Python/python.exe" C:\Users\Admin\.vscode\extensions\ms-python.python-2021.6.944021595\pythonFiles\lib\python\debugpy\adapter --for-server 63980 --host 127.0.0.1 --port 9000 --server-access-token 14f7030f88c84ca7ba96a4e6d7ddea1cf5ce006b17560ba7e9a38336b1e292c7
set "DEBUGPY_LOG_DIR=" && "C:/Users/Admin/AppData/Local/Autodesk/webdeploy/production/48ac19808c8c18863dd6034eee218407ecc49825/Python/python.exe" C:\Users\Admin\.vscode\extensions\ms-python.python-2021.6.944021595\pythonFiles\lib\python\debugpy\adapter --for-server 63980 --host 127.0.0.1 --port 9000 --server-access-token 14f7030f88c84ca7ba96a4e6d7ddea1cf5ce006b17560ba7e9a38336b1e292c7

#stupid trailing space in the DEBUGPY_LOG_DIR environment vaiorable was preventing debugpy adapter form running.

import neu_dev, inspect, os, sys, pprint; pp=pprint.PrettyPrinter(indent=4, width=80, depth=2, compact=False); pp.pprint(
    inspect.getmembers(neu_dev.run_script)
)






# yields, for instance, [('c:\\work\\fusion_programmatic_experiment\\test_scripts\\arbitrary_script_1', 'C:\\work\\fusion_programmatic_experiment\\test_scripts\\arbitrary_script_1')]
# This is a good candidate for how Fusion might be detecting which script is mentioned in the vs code attach request.
# experiment idea: with fusion in native debug mode (i.e. after running the text command "Python.IDE", for instance),
# attempt to attach to the debug server with several various states of the vs code launch.json file:
# 1) with the "filePath" entry removed.
#>> in this case, fusion runs the script determined by the pathMappings entry.

# 2) with the "pathMappings" entry removed (but the filePAth entry present.)
#>> strangely, vs code still sent the usual pathMappings.
# therefore, rather than remove pathMappings, I set the subproperties of the pathMappings entry to bogus values (empty string).
#>> in this case, fusion really did send the empty strings that I specified, but amazingly fusion still ran the correct script.  How?
#>> restart fusion
#>> now, when rerunning the test, fusion fails to run the script.  This suggests that, in case receives invalid pathMappings value,
#>> fusion assumes the previous value.  (Actually, this defaulting-to-last-valid-value might be done by the pydevd_file_utils module, which handles updating the pydevd_file_utils._last_client_server_paths_set value.)
# I have tested and can confirm that, starting with pydevd_file_utils._last_client_server_paths_set having legitimate path values, doing an attach with empty-string path values
# results in pydevd_file_utils._last_client_server_paths_set maintaining the same original legitimate path values.


# 3) with the filePath and pathMappings entries each pointing to a different script.
#>> in this case, fusion runs the script determined by the pathMappings entry.

# if we have run an add-in in debug mode using the fusion UI, Will this put Fusion in a different state as running a 'script' in debug mode?  Specifically, if we have run  an add-in in debug mode, 
# will subsequent attach requests for scripts fail to run the scripts?
#>> No.  But, evidently, in the case where the first attach request after initiating debug mode via the Fusion UI contains bogus pathMappings values, subsequent atach requests with legitimate pathMappings values 
#>> fail to cause the script to run.



# regardless of what's in the launch.json file, vs code is sending, in the attach request arguments, a parameter named 'workspaceFolder', which is the path of the vscode workspace folder.
# a text search through all files in the debugpy directory for the text "workspaceFolder" (case-insensitive) yields nothing.  This suggests that neither debugpy nor pydevd pay attention
# to the 'workspaceFolder' argument in the 
# attach request, and that therefore, Fusion probably does not pay attention to it either when deciding which script to run in response to the attach request.

# Given that debugpy (and also, pydevd bundled within debugpy) do not seem to do anything with the filePath entry of the attach request (as evidence by the fact that 
# a search through all files within the debugpy directory for the text "filePath" (case insensitive) yields nothing),
# credence is lended to the theory that fusion is looking at pydevd_file_utils._last_client_server_paths_set to determine which script vs code is working with.
# Probably, Fusion looks for the presence of an appropriately-named .manifest file in the specified directory.
# Let's use procmon to see if Fusion does access the .manifest file.

#Note: The Python.IDE textCommand launches the debugpy adapter process, but does not seem to put Fusion into quite the same state as using the Fusion UI to run a script in debug mode.
# Specificlly, whereas initiating debug mode using the UI buttons within Fusion puts Fusion into a state where Fusion will run a script when debugpy receives an attach request (namely, the script
# specified by the pathMappings argument in the attach request, it seems (apparently, by looking for
# a .manifest file (but not acutally reading the contents of the .manifest file, according to procmon), and then loading the 
# same-named .py file).), after initiaing debug mode using the Python.IDE textCommand, doing an attach with vs code does not cause fusion to run the script.

# question: If we initiate debug mode using the Fusion UI buttons, then run the Python.IDE text command, will Fusion be in the run-on-attach state?
# answer: yes.


# question: If we run Python.IDE text command, then we click the Fusion UI button to debug a script, will Fusion be in the run-on-attach state?
# answer: yes.

# therefore, it would seem that, regardless of when and whether the Python.IDE text command has been run, clicking the Fusion UI debug button # is sufficient to put
# fusion into the run-in-attach state (assuming that we have not first screwed things up by sending an attach request with empty-string pathMappings.)

# question: Which of the two PaathMappings properties (namely, "localRoot" and "remoteRoot") does Fusion consider when deciding which script to run?
# test: restart fusion.  Initiate debug mode using the UI button.  Send an attach request with an empty-string localRoot and a legitimate remoteRoot.
#>> Does the debugpy adapter log show that the desired localRoot and remoteRoot values were actually sent?: yes
#>> pydevd_file_utils._last_client_server_paths_set value is: []
#>> which script runs: No script runs.
#>> analysis: apparently, pydevd treats the case of an empty-string localroot the same as the case of both localroot and remoteroot being empty strings.

# test: restart fusion.  Initiate debug mode using the UI button.  Send an attach request with a legitimate localRoot and an empty-string remoteRoot.
#>> Does the debugpy adapter log show that the desired localRoot and remoteRoot values were actually sent?: yes
#>> pydevd_file_utils._last_client_server_paths_set value is: []
#>> which script runs: no script runs.

# test: restart fusion.  Initiate debug mode using the UI button.  Send an attach request with localRoot pointing to arbitrary_Script1 and remoteRoot pointing to arbitrary script 2.
#>> Does the debugpy adapter log show that the desired localRoot and remoteRoot values were actually sent?: yes
#>> pydevd_file_utils._last_client_server_paths_set value is: [('c:\\work\\fusion_programmatic_experiment\\test_scripts\\arbitrary_script_1', 'c:\\work\\fusion_programmatic_experiment\\test_scripts\\arbitrary_script_2')]
#>> which script runs: arbitrary_script_1
#>> analysis: It appears that Fusion looks at pydevd_file_utils._last_client_server_paths_set[0][0] (which pydevd_file_utils will have set to match the "localRoot" property of the pathMAppings argument of the attach request)
#>> to decide which script to run.


# question: When we use the Fusion UI button to initiate debugging, does Fusion read any files or folders in the directory of the selected script?
#>> yes, it appears that, upon clicking the debug UI button, Fusion checks to ensure that .vscode/settings.json and .vscode/launch.json and .env are present within the script's directory.

# force_pydevd, a module within debugpy, configures pydevd logging to match the logging directory specified by the DEBUGPY_LOG_DIR environment variable.
#force_py_devd is imported by the debugpy.server module.
# when debug mode is initiated by fusion_script_runner_addin, pydevd logging does not get setup, suggesting that force_py_devd is never run.
# On the other hand, when debug mode is initiated via Fusion UI button, pydevd logging does get set up.

# In the Fusion UI, the debug button does the following things:
#   1) ensures that debug mode is initiated.  To initiate debug mode, we import debugpy and call debugpy.listen, which in turn starts the pyhton interpreter as a separate process running the debugpy.adaptor script.
#   2) Sets up a set of threads to implement what I call "run-on-attach" behavior.  This behavior relies on the debugpy.wait_for_client() function (running in a thread other than the main fusion thread so as not to block the ui),
        and the pydevd_file_utils._last_client_server_paths_set value, which the debugpy/pydevd machinery causes to be set to the value of the pathMappings.localRoot and pathMappings.remoteRoot valuse that
        the IDE sends in its attach request to the debugpy adaptor.  With run-on-attach "mode" active, when an attach request is received by the debugpy adaptor, Fusion responds by looking at pydevd_file_utils._last_client_server_paths_set
        and then running the script (or add-in) contained in the directory pydevd_file_utils._last_client_server_paths_set[0][0] (i.e. the "run" function in the .py file in that directory that has the same name as a .manifest file in that directory)
        Actually (I think), Fusion completely reloads the specified script (and first runs the "stop" method of the existing loaded version of the script, if the script has been loaded before) (actually, only add-ins have a "stop" function 
        -- I am using the word "script" to refer to both "scripts" and add-ins, because they are very nearly the same thing.)
    3) Launches VS code with the workspace directory being the directory of the specified script, and ensures that the standard .vscode/settings.json, .vscode/launch.json, and .env files exist in the 
        script directory, creating them if they do not exist.
It is notable that clicking the debug button in the Fusion ui does not directly cause the script to run, but rather puts Fusion into the aforementioned "run-on-attach" state, wherein Fusion will run scripts in
response to attach requests being sent to the debug adaptor.

To faithfully mimic the behavior of the Fusion UI's debug button, we would like to be able to command our fusion_script_runner_addin to set up its own implementation of the "run-on-attach" behavior.
It makes sense to have the following commands:
    1) start debug mode (or, more accurately, ensure that debug mode is started).  This would merely import debugpy and call debugpy.listen().
    2) start "run-on-attach" mode.  This would ensure that debug mode as active, then set up a sort of "run-on-attach" behavior similar to that provided by the Fusion UI debug button.
    3) Run a script.

Notice that commands 1 and 2 above, are completely independent of any specific script to be run.  


https://github.com/JesusFreke/fscad